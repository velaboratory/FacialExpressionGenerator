import numpy as np        # `pip install numpy`
import cv2                # `pip install opencv-python`
import leapuvc            #  Ensure leapuvc.py is in this folder
import json

#this script is to record the real data for observaton and then adjust the unity synthetic data

# load calibration file
with open("calibration.json", 'r') as j:
     contents = json.loads(j.read()) 


# set the leap 
leap = leapuvc.leapImageThread(source=1,resolution = (640,480)) # resolution in the manual 
leap.setExposure(20)
leap.setLeftLED(True)
leap.setCenterLED(True)
leap.setRightLED(True)
leap.start()

undistRect = True
# Start the Leap Capture Thread

file = "real"
num = 0 
# Capture images until 'q' is pressed
while((not (cv2.waitKey(1) & 0xFF == ord('q'))) and leap.running):
    newFrame, leftRightImage = leap.read() # in np.uint8
    if(newFrame):
        # Rectify the image
        #print("before the undistorted: ",leftRightImage[0].shape)
        if(undistRect):
                maps = contents['left']["undistortMaps"]
                leftRightImage[0] = cv2.remap(leftRightImage[0], np.array(maps[0], dtype=np.int16), # 
                np.array(maps[1], dtype=np.int16), cv2.INTER_LINEAR)
                maps = contents['right']["undistortMaps"]
                leftRightImage[1] = cv2.remap(leftRightImage[1], np.array(maps[0], dtype=np.int16), # 
                np.array(maps[1], dtype=np.int16), cv2.INTER_LINEAR)
                
        cv2.imwrite( "images/realleft"+ str(num) +".png",leftRightImage[0])
        cv2.imwrite( "images/realright"+ str(num) +".png",leftRightImage[1])
        num+=1
        
      
        cv2.imshow('Frame L', leftRightImage[0])
        cv2.imshow('Frame R', leftRightImage[1] )

cv2.destroyAllWindows()

